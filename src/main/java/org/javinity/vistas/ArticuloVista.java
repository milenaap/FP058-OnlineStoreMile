package org.javinity.vistas;

import org.javinity.controladores.ArticuloControlador;
import org.javinity.modelos.Articulo;

import java.util.Scanner;

/**
 * Clase que representa la vista del m칩dulo de gesti칩n de art칤culos.
 * Permite al usuario interactuar con el sistema a trav칠s de la consola,
 * mostrando men칰s y solicitando datos.
 * Forma parte de la arquitectura MVC, comunic치ndose exclusivamente con el controlador.
 *
 * @author Javinity
 */
public class ArticuloVista {
    private ArticuloControlador articuloControlador;
    private Scanner scanner;

    /**
     * Constructor de la clase ArticuloVista.
     *
     * @param articuloControlador Controlador de art칤culo que gestiona la l칩gica de negocio.
     */
    public ArticuloVista(ArticuloControlador articuloControlador) {
        this.articuloControlador = articuloControlador;
        this.scanner = new Scanner(System.in);
    }

    /**
     * Muestra el men칰 de opciones relacionadas con la gesti칩n de art칤culos
     * y permite al usuario navegar entre las distintas acciones disponibles.
     */
    public void mostrarMenu() {
        int opcion;
        do {
            System.out.println("\n Gesti칩n de Art칤culos");
            System.out.println("1. A침adir Art칤culo");
            System.out.println("2. Mostrar Art칤culos");
            System.out.println("3. Volver al men칰 principal");
            System.out.print("Selecciona una opci칩n: ");
            opcion = scanner.nextInt();
            scanner.nextLine();

            switch (opcion) {
                case 1 -> agregarArticulo();
                case 2 -> mostrarArticulos();
                case 3 -> System.out.println("Volviendo al men칰 principal...");
                default -> System.out.println(" Opci칩n no v치lida.");
            }
        } while (opcion != 3);
    }

    /**
     * Solicita los datos del nuevo art칤culo al usuario por consola,
     * valida los datos introducidos y los env칤a al controlador para ser a침adidos.
     */
    private void agregarArticulo() {
        try {
            System.out.print("C칩digo del producto: ");
            String codigo = scanner.nextLine();

            System.out.print("Descripci칩n: ");
            String descripcion = scanner.nextLine();

            System.out.print("Precio de venta: ");
            float precio = Float.parseFloat(scanner.nextLine());
            if (precio < 0) throw new IllegalArgumentException("El precio no puede ser negativo.");

            System.out.print("Gastos de env칤o: ");
            float gastosEnvio = Float.parseFloat(scanner.nextLine());
            if (gastosEnvio < 0) throw new IllegalArgumentException("Los gastos de env칤o no pueden ser negativos.");

            System.out.print("Tiempo de preparaci칩n (minutos): ");
            int tiempoPrep = Integer.parseInt(scanner.nextLine());
            if (tiempoPrep < 0) throw new IllegalArgumentException("El tiempo de preparaci칩n no puede ser negativo.");

            articuloControlador.agregarArticulo(codigo, new Articulo(codigo, descripcion, precio, gastosEnvio, tiempoPrep));
        } catch (NumberFormatException e) {
            System.out.println("Error: Debes introducir un n칰mero v치lido.");
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Llama al controlador para mostrar la lista de art칤culos disponibles.
     */
    private void mostrarArticulos() {
        System.out.println("\n游닆 Lista de Art칤culos:");
        articuloControlador.mostrarArticulos();
    }
}
